# This is the teams CD/CD pipeline
name: CI/CD
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# Env 
env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}
  FRONTEND_IMAGE_NAME: se-5g00dm04/lowg-frontend
  BACKEND_IMAGE_NAME: se-5g00dm04/lowg-backend
# The jobs that is part of the workflow
jobs:
  # Job for testing the frontend and backend code changes
  test:
  
    # running on ubuntu
    runs-on: ubuntu-latest
    steps:
      # Fetch the code using the checkout action
      - name: Fetch Code
        uses: actions/checkout@v3
      # Installing a Node LTS version
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      # Installing the node modules for the frontend
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install
      # Running the tests for the frontend code
      - name: Run Frontend Tests
        working-directory: ./frontend
        # this command needs to be added to the frontend package.json
        run: npm run test:ci
      # Installing the node modules for the backend
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm install
      # Running the linter and tests for the backend code
      - name: Run Backend Tests
        working-directory: ./backend
        run: npm run lint && npm run test
  


# Job for building the frontend and backend container images and pushing it to the registry
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    ## Test must be secceed
    needs: test

    permissions:
      contents: read
      packages: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Fetch code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Build
        uses: docker/setup-buildx-action@v3
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      # Building and pushing the frontend image to the registry using an action
      - name: Build and push Docker Frontend images
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./frontend
          file: ./frontend/DockerfileServerProduction
          push: true
          tags: | 
            "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}"
            "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"
      # Building and pushing the backend image to the registry using an action
      - name: Build and push Docker Backend images
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./backend
          file: ./backend/DockerfileServer
          push: true
          tags: | 
            "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}"
            "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}"
  deploy:
    runs-on: ubuntu-latest
    # Build job needs to succeed
    needs: build
    
    permissions:
      contents: read
      packages: write
      
    steps:
      # Fetch the code using the checkout action
      - name: Fetch Code
        uses: actions/checkout@v3
      # Get the release version
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Test
        run: |
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
      # Install OpenVPN to be able to connect to the VM server
      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt --assume-yes --no-install-recommends install openvpn openvpn-systemd-resolved
      # Create OpenVPN configuration files
      - name: Setup VPN config
        run: |
          echo "${{ secrets.VPN_CA_CRT }}" > ca.crt
          echo "${{ secrets.VPN_USER_CRT }}" > user.crt
          echo "${{ secrets.VPN_USER_KEY }}" > user.key
          echo "${{ secrets.VPN_PASSWORD }}" > secret.txt
          echo "${{ secrets.VPN_CONFIG }}" > config.ovpn
      # Start the VPN connection
      - name: Connect VPN
        run: sudo openvpn --config config.ovpn --daemon --log vpn.log
      # Helper command to make sure the VPN connection is up before continueing
      - name: Wait for a VPN connection
        timeout-minutes: 2
        run: until ping -c1 ${{ secrets.REMOTE_SERVER }}; do sleep 2; done
      # Steps needed for getting SSH to connect
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_KEY_PRIVATE }}" | base64 -d > ~/.ssh/id_rsa 
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts
      # Install rsync
      - name: Install rsync
        run: sudo apt --assume-yes --no-install-recommends install rsync
      # Create stack config and sync to the VM server
      - name: Create and sync stack configuration
        run: |
          mkdir -p prod_stack
          cp docker-compose.prod.yml prod_stack/docker-compose.yml
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}" >> prod_stack/.env
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}" >> prod_stack/.env
          rsync -r prod_stack "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:./"
      # SSH into VM server and bring up the stack
      - name: Start containers via SSH
        run:
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }} /bin/bash
          "
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }};
          cd prod_stack;
          docker-compose pull;
          docker-compose up -d;
          "
      - name: Kill VPN connection
        if: always()
        run: |
          sudo chmod 777 vpn.log
          sudo killall openvpn
